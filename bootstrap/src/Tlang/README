## Syntax

language syntax, using parsing expression grammar.
Please ref to https://en.wikipedia.org/wiki/Parsing_expression_grammar for definition.

The syntax is not fully determined yet and will get changed in the future.

``` PEG
Global <- Function | TypeDefinition | ValueDefiniton

ValueDefiniton <- "let" Identifier TypeAnnotation "=" Literal

TypeDefinition <- "data" Identifier "{" TypeDefItem+ "}"
TypeDefItem <- (TypeRecordFieldPair | TypeSumDef) ";"
TypeRecordFieldPair <- Identifier TypeAnnotation
TypeSumDef <- Identifier "=" Type

Function <- "fn" Identifier TypeAnnotation? (";" / LambdaBlock)

LambdaBlock <- "{" (LambdaParaList+ "->")?  LambdaStatement? "}"

LambdaParaList <- LambdaParaList "," LambdaParameter | LambdaParameter
LambdaParameter <- Identifier TypeAnnotation?

LambdaStatement <- LambdaStatement ";" Expression | Expression

Expression <- Identifier / Literature / Expression ("+" / "-" / "*" / "/") Expression
Binding <- "let" Identifier TypeAnnotation? "=" Expression

TypeAnnotation <- ":" Type

Type <- TypeApplication / TypeArrow / TypeArray / TypeSymbol
TypeSymbol <- Identifier
TypeApplication <- Type+
TypeArrow <- TypeArrow? "->" Type / Type "->" Type
TypeArray <- '[' Type ']'

Identifier <- IdentifierToken (IdentifierToken / [0-9])*
IdentifierToken <- [a-z] / [A-Z] / '_'

Literature <- Number | StringLit

Number <- '-'? (NumberInteger / NumberFloat / NumberHex)
NumberToken <- [0-9]
NumberInteger <- NumberToken+
NumberFloat <- NumberToken+ ('.' NumberToken+)?
NumberHex <- '0' ('x' / 'X') (NumberToken / [a-f] / [A-F])+

StringLit <- '"' StringLitToken* '"'
StringLitToken <- '\' '"' / [a-z] / [A-Z] / [0-9] / '!@#$%^&*()_+|-=\`~{}[],./<>?;:'

WhiteSpace <- WhiteSpaceToken*
WhiteSpaceToken <- ' ' / '\n'
```

## Project layout

- AST
  > used to hold syntax element
- Parser
  > actual parser, use pratt parser structure
- Rep
  > runtime type representation
- Inference
  > type inference
- JIT
  > JIT compiler
