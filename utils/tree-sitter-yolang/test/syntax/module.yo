module "git@github://yolang/stdlib" /* example prefix, usage is defined by compiler */ example/module
// exporting list
( #unix#fs#open
, #unix#fs#open#(:+)
, module #unix#fs#internal *            // all items inside the module exporting list
, module #unix#fs                       // export the module name
, module #unix#process * exclude (fork) // all items inside the module excluding "fork"
, module (#unix, #net)                  // export module name in exporting list, allows other to ref it as #example#module#unix
, module *                              // all modules imported
, module * exclude (#net)               // all modules imported excluding ..
, *                                     // everything defined inside the module
, * exclude ((++), cl, ##type)          // everything defined inside excluding
)
;;

// import simple module
use std/prelude { ##type } ;;

// import module with alias, "prelude" and "stdlib" are in scope
// prelude is imported from root, implied by "root:" and implemented
// by compiler
use root: std/prelude alias stdlib ;;

/* import module renamed, only module "cl" is in scope, "container" is hiding
**
** all items under container are in scope.
*/
use stdlib/container as cl *
exclude ((<>), ##alias, list)
;;

// import simple module name with attribute, useful for
// autogenerated module.
use "external" clib/io;;

// import all names from simple module
use io/unix *;;

// import all names from module and also the module name "process"
use io/unix/process self *;;

// import all except something from simple module
use io/unix/net * exclude (type);;

// import something from module
use io/unix/pipe {
  (??), // with operator
  net_open, // selective items from pipe
  stdio *, // all items from stdio
  fs * exclude (openfd), // all items from fs except ...
  fs/inline { memfs, (--) } // selective items from fs/inline inside io/unix/pipe
};;
