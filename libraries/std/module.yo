module std ;;

// standard boolean type
data bool
| false
| true
;;

data pair a b
{ fst : a
, snd : b
}
;;

// sequence operator
fixity 0 ; _ infix
;;

let (;) : forall a b. a !'e1 -> b !'e2 -> b !{..'e1, ..'e2}
| ?e1, ?e2 | do {
  do e1, do e2
}
;;

fixity 0 $ _ infix
;;

let ($) : forall a b. (a -> b) -> a -> b | ?f, ?val | f val
;;

let when: forall a b. bool -> a -> b
| true, ?a, _ = a
| false, _, ?b = b
;;

fixity 0 & _ infix
;;

let (&) : forall a b. a -> (a -> b) -> b | ?val, ?f | f val
;;

let flip: ('a -> 'b -> 'c) -> 'b -> 'a -> 'c
| ?f, ?a, ?b | f b a
;;
